[1, 2, 3, 4, 5].length; // 5
[1, 2, 3, 4, 5].push(1); // 6 -> [1, 2, 3, 4, 5, 1]
[1, 2, 3, 4, 5].unshift(0); // 6 -> [0, 1, 2, 3, 4, 5]
[1, 2, 3, 4, 5].pop(); // 5 -> [1, 2, 3, 4]
[1, 2, 3, 4, 5].shift() // 1 -> [2, 3, 4, 5]
[1, 2, 3, 4, 5].at(2); // 3
[1, 2, 3, 4, 5].indexOf(3) // 2
[1, 2, 3, 4, 5].includes(3) // true
[1, 2, 3, 4, 5].map((num) => Math.pow(num, 2)); // [1, 4, 9, 16, 25]
[1, 2, 3, 4, 5].filter((num) => num % 2); // [1, 3, 5]
[1, 2, 3, 4, 5].every((num) => num > 1); // false
[1, 2, 3, 4, 5].some((num) => num === 3); // true
[1, 2, 3, 4, 5].fill(10); // [10, 10, 10, 10, 10]
[1, 2, 3, 4, 5].reduce((acc, num) => acc + num); // 15
[1, 2, 3, 4, 5].concat([6, 7]); // [1, 2, 3, 4, 5, 6, 7]
[1, 2, 3, 4, 5].reverse(); // [5, 4, 3, 2, 1]
[5, 2, 3, 4, 1].sort(); // [1, 2, 3, 4, 5]
[1, 2, 3, 4, 5].join('-'); // '1-2-3-4-5'
[1, 2, [3, 4], 5].flat(); // [1, 2, 3, 4, 5]
[1, 2, 3, 4, 5].find((num, i) => i === 1); // 2
[1, 2, 3, 4, 5].findIndex((num) => num === 2); // 1
[1, 2, 3, 4, 5].toString(); // '1,2,3,4,5'
[1, 2, 3, 4, 5].slice(1, 3); // [2, 3]
[1, 2, 3, 4, 5].splice(1, 3, 5); // [2, 3, 4]
Array.isArray("[1, 2, 3]"); // false
Array.from("123"); // ['1', '2', '3']